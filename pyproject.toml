[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.poe.tasks]
# https://github.com/nat-n/poethepoet
_format = "black ."
_sort_imports = "isort ."
_lint = "ruff check --fix ."

_check_format = "black --check ."
_check_sort_imports = "isort --check ."
_check_lint = "ruff check ."

# if you are using poetry for dependency management, you have to generate a requirements.txt first
_convert_to_req_txt = { shell = "poetry export --without-hashes --format=requirements.txt > requirements.txt" }
# check authorization of the licenses of dependencies as defined in [tool.liccheck] section 
# (or a separate liccheck.ini-file)
_check_licenses = "liccheck -s liccheck.ini -r requirements.txt"

check_licenses = [
    "_convert_to_req_txt",
    "_check_licenses",
]

docs = "mkdocs serve"
precommit = ["_format", "_sort_imports", "_lint"]
check = ["_check_format", "_check_sort_imports", "_check_lint", "check_licenses"]
test = "pytest"

[tool.black]
# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 120

[tool.isort]
# https://pycqa.github.io/isort/docs/configuration/config_files
profile = "black"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/7.1.x/reference/customize.html
addopts = "--color=yes --doctest-modules  -ra --cov --cov-report=html --cov-report term --cov-report xml:coverage.xml --exitfirst --failed-first --strict-config --strict-markers --verbosity=2 --junitxml=python-junit.xml"
xfail_strict = true
pythonpath = ["hgb_ai_data_energy_aware_production"]
testpaths = ["hgb_ai_data_energy_aware_production", "tests"]
# ignore any of these paths
norecursedirs = [ ]

# https://github.com/charliermarsh/ruff
[tool.ruff]
fix = true
line-length = 120
src = ["hgb_ai_data_energy_aware_production", "tests"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.liccheck]
# see also: https://pypi.org/project/liccheck/
# Authorized and unauthorized licenses in LOWER CASE
authorized_licenses = [
        "bsd",
        "new bsd",
        "bsd 3-clause",
        "bsd license",
        "isc license",
        "isc license (iscl)",
        "apache",
        "apache 2.0",
        "apache software",
        "apache software license",
        "apache license, version 2.0",
        "gnu lgpl",
        "historical permission notice and disclaimer (hpnd)",
        "lgpl with exceptions or zpl",
        "mozilla public license 2.0 (mpl 2.0)",
        "mit",
        "mit license",
        "new bsd license",
        "python software foundation license",
        "python software foundation",
        "simplified bsd",
        "the unlicense (unlicense)",
	]
# as_regex = true -> e.g. '\bgpl'
unauthorized_licenses = [
	"gpl v3",
	"gnu general public license v2 or later (gplv2+)",
]
level = "standard"  # alternatives: "cautious", "paranoid"
requirement_txt_file = "./requirements.txt"
reporting_txt_file = "./liccheck_reporting.txt" # by default is None

[tool.liccheck.authorized_packages]
# Python software license (see http://zesty.ca/python/uuid.README.txt)
uuid = "1.30"


[dependencies-groups]
dev = [
    "poethepoet",
    "black[jupyter]",
    "ruff",
    "isort",
    "pytest",
    "pytest-clarity",
    "pytest-cov",
    "pytest-xdist",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "liccheck",
    "setuptools",
]

[tool.pdm.build]
includes = [
    "hgb_ai_data_energy_aware_production",
]

[[tool.pdm.source]]
name = "risc-pypi"
url = "https://pypiserver.risc-software.at"
verify_ssl = true

[project]
authors = [
    {name = "Dominik Falkner", email = "dominik.falkner@risc-software.at"},
]
requires-python = "<3.11,>=3.10"
dependencies = [
    "pyarrow<20.0.0,>=19.0.0",
    "pandera<1.0.0,>=0.22.1",
    "seaborn<1.0.0,>=0.13.2",
    "matplotlib<4.0.0,>=3.10.0",
    "scikit-learn<2.0.0,>=1.6.1",
    "open-mastr<1.0.0,>=0.14.5",
    "adjusttext<2.0.0,>=1.3.0",
    "geopandas<2.0.0,>=1.0.1",
    "geopy<3.0.0,>=2.4.1",
    "ipykernel>=6.29.5",
]
name = "hgb-ai-data-energy-aware-production"
version = "0.0.1"
description = "This package contains the code to generate problem instances of an energy aware scheduling problem."
classifiers = [
    "Programming Language :: Python :: 3",
]

[project.urls]
repository = "https://github.com/user/my-package"

[dependency-groups]
dev = [
    "poethepoet",
    "black[jupyter]",
    "ruff",
    "isort",
    "pytest",
    "pytest-clarity",
    "pytest-cov",
    "pytest-xdist",
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
    "liccheck",
    "setuptools",
    "quarto-cli>=1.6.40",
]

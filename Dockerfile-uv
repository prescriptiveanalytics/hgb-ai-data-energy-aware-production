ARG FROM_IMAGE=debian:bookworm-slim
ARG FROM_IMAGE_RUNTIME=debian:bookworm-slim
ARG FROM_IMAGE_DEV=debian:bookworm-slim

ARG DEBIAN_FRONTEND=noninteractive

# ==============================================================================
# Builder Stage
# ==============================================================================
FROM $FROM_IMAGE AS build
LABEL maintainer="Dominik Falkner <dominik.falkner@risc-software.at>"

# system dependencies dependencies, these are necessary to run your software
RUN apt-get update && apt-get install -yq \
    # needed because of quarto-cli
    ca-certificates \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# ensure Python uses this virtual environment
ENV VIRTUAL_ENV=/opt/venv \
    PATH="$VIRTUAL_ENV/bin:$PATH"
# create a virtual environment in a persistent location
RUN uv venv /opt/venv

# prepare workspace and dependencies
WORKDIR /workspace
COPY pyproject.toml *.lock ./
RUN uv sync --active && uv cache prune --ci

# ==============================================================================
# Runtime Stage
# ==============================================================================
FROM $FROM_IMAGE_RUNTIME AS runtime

# copy the virtual environment from the build stage - careful this won't work with the current setup
# see: https://github.com/astral-sh/uv/issues/6782
COPY --from=build /opt/venv /opt/venv

# copy source code
COPY . /workspace
CMD ["bash"]

# ==============================================================================
# Development Stage
# ==============================================================================
FROM build AS dev

# install dev tools
RUN apt-get update && apt-get install -yq \
    curl \
    git \
    neovim \
    libgdal-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# install development dependencies
RUN uv sync --all-extras --active && uv cache prune --ci \
    && uvx cruft